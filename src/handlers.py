"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

import time
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LinkPreviewOptions
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler
)
from auth import Auth
from config import logger, RANDOM_BOOKS_COUNT, CALIBRE_WEB_URL
from config import (SEARCH, BOOK_SELECT, FORMAT_SELECT, REQUEST_SEARCH, REQUEST_TITLE,
                    REQUEST_AUTHOR, REQUEST_SERIES, REQUEST_ID, REQUEST_UPLOAD
                    )
from upload_file import handle_url_upload, handle_document_upload
from stats import get_stats_message
from reset import reset_last_command, reset_search
from download import format_selected
from search import perform_search
from book import book_selected

auth = Auth()


def permission_required(is_admin: bool = False):
    """Decorator for checking permissions"""
    def outer_wrapper(fn):
        @wraps(fn)
        async def wrapper(*args, **kwargs):
            update: Update = args[0]
            context: CallbackContext = args[1]

            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id,
                action=ChatAction.TYPING
            )

            if not is_admin and not auth.is_authorized(update.effective_user.id):
                await (update.message if update.message else update.edited_message).reply_text(
                    "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n" +
                    "      –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞\n" +
                    f"      –í–∞—à ID={update.effective_user.id}"
                )
                return reset_last_command(context)

            # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if is_admin and not auth.is_admin(update.effective_user.id):
                await (update.message if update.message else update.edited_message
                       ).reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return reset_last_command(context)

            return await fn(*args, **kwargs)
        return wrapper
    return outer_wrapper

# ==========================================================================

# Handlers


@permission_required()
async def book_selected_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    logger.debug("book_selected_handler() start")
    query = update.callback_query
    await query.answer()

    if query.data in ['prev_page', 'next_page'] or query.data.startswith('page_'):
        return await pagination_handler(update, context)

    if query.data.startswith('cancel'):
        await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return reset_search(context)

    book_index = int(query.data.split('_')[1])
    book = context.user_data['search_results'][book_index]
    context.user_data['selected_book'] = book

    link_preview_options = None
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CALIBRE_WEB_URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥–∏
    if CALIBRE_WEB_URL:
        cover_url = str(CALIBRE_WEB_URL).format(str(book['id']), str(time.time()))
        logger.warning(
            "book_selected_handler() cover_url: %s", cover_url)
        link_preview_options = LinkPreviewOptions(
            is_disabled=False,
            url=cover_url
        )

    reply_markup, text = book_selected(book)

    await (
        update.message if update.message else update.edited_message
          ).reply_text(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup,
        link_preview_options=link_preview_options
    )

    return FORMAT_SELECT


@permission_required()
async def perform_search_handler(update: Update, context: CallbackContext) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    logger.debug("perform_search_handler() start")
    return await perform_search(update, context)


@permission_required()
async def format_selected_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    logger.debug("format_selected_handler() start")
    query = update.callback_query
    await query.answer()

    if query.data == 'cancel':
        await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return reset_search(context)

    if query.data == 'back':
        return await perform_search(update, context)

    selected_format = query.data.split('_')[1]
    book = context.user_data['selected_book']

    await query.edit_message_text(f"‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫–Ω–∏–≥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {selected_format.upper()}...")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.UPLOAD_DOCUMENT
    )

    message = await format_selected(book, selected_format, context, update.effective_chat.id)

    await query.edit_message_text(message)
    return reset_search(context)


@permission_required()
async def handle_parameter_response_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º"""
    logger.debug("handle_parameter_response_handler() start")

    message = update.message if update.message else update.edited_message
    if message and message.text:
        logger.warning(
            "handle_parameter_response_handler() called with message text: %s", message.text)

    param_value = message.text.strip() if message and message.text else ''
    if not param_value:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return globals()[f"REQUEST_{context.user_data['current_command'].upper()}"]

    reset_last_command(context)

    context.user_data['search_query'] = param_value
    context.user_data['awaiting_parameter'] = False

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å
    command = context.user_data['current_command']
    if command == 'search':
        context.user_data['search_type'] = 'all'
        return await perform_search(update, context)
    elif command == 'title':
        context.user_data['search_type'] = 'title'
        return await perform_search(update, context)
    elif command == 'author':
        context.user_data['search_type'] = 'author'
        return await perform_search(update, context)
    elif command == 'series':
        context.user_data['search_type'] = 'series'
        return await perform_search(update, context)
    elif command == 'random':
        context.user_data['search_type'] = 'random'
        return await perform_search(update, context)
    elif command == 'id':
        context.user_data['search_type'] = 'id'
        return await perform_search(update, context)
    elif command == 'upload':
        return await handle_url_upload(update, context, param_value)
    return ConversationHandler.END


@permission_required()
async def pagination_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    logger.debug("pagination_handler() start")
    query = update.callback_query
    await query.answer()

    action = query.data

    if action == 'prev_page':
        context.user_data['current_page'] -= 1
    elif action == 'next_page':
        context.user_data['current_page'] += 1

    return await perform_search(update, context)


@permission_required()
async def search_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞"""
    logger.debug("search_handler() start")
    reset_search(context)

    message = update.message if update.message else update.edited_message
    if message and message.text:
        logger.warning(
            "search_handler() called with message text: %s", message.text)

    context.user_data['current_command'] = 'search'
    if (
        not context.args and
        (
            not message or
            not message.text or
            not message.text.strip() or
            message.text.strip() == '/search'
        )
    ):
        return await request_parameter(
            update,
            context,
            "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞):"
        )

    query = (' '.join(context.args) if context.args
             else message.text.replace('/search', '').strip()
             )
    context.user_data['search_type'] = 'all'
    context.user_data['search_query'] = query
    return await perform_search(update, context)


@permission_required()
async def series_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ—Ä–∏–∏"""
    logger.debug("series_handler() start")
    reset_last_command(context)
    context.user_data['current_command'] = 'series'

    if not context.args:
        return await request_parameter(
            update,
            context,
            "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )

    context.user_data['search_type'] = 'series'
    context.user_data['search_query'] = ' '.join(context.args)
    return await perform_search(update, context)


@permission_required()
async def title_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    logger.debug("title_handler() start")

    reset_last_command(context)

    context.user_data['current_command'] = 'title'

    if not context.args:
        return await request_parameter(
            update,
            context,
            "üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )

    context.user_data['search_type'] = 'title'
    context.user_data['search_query'] = ' '.join(context.args)
    return await perform_search(update, context)


@permission_required()
async def author_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É"""
    logger.debug("author_handler() start")

    reset_last_command(context)
    context.user_data['current_command'] = 'author'

    if not context.args:
        return await request_parameter(
            update,
            context,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )

    context.user_data['search_type'] = 'author'
    context.user_data['search_query'] = ' '.join(context.args)
    return await perform_search(update, context)


@permission_required()
async def random_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ—Ä–∏–∏"""
    logger.debug("random_handler() start")

    reset_last_command(context)
    context.user_data['current_command'] = 'random'

    context.user_data['search_type'] = 'random'
    context.user_data['search_query'] = ' '.join(context.args)
    return await perform_search(update, context)


@permission_required()
async def id_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ ID"""
    logger.debug("id_handler() start")

    reset_last_command(context)
    context.user_data['current_command'] = 'id'

    if not context.args:
        return await request_parameter(
            update,
            context,
            "#Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )

    context.user_data['search_type'] = 'id'
    context.user_data['search_query'] = ' '.join(context.args)
    return await perform_search(update, context)

# pylint: disable=W0613


@permission_required()
async def stats_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    logger.debug("stats_handler() start")

    message = get_stats_message()
    if not message:
        await (update.message if update.message else update.edited_message
               ).reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await (update.message if update.message else update.edited_message).reply_text(message)


# pylint: disable=C0301
@permission_required()
async def start_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.debug("start_handler() start")
    reset_last_command(context)

    await (update.message if update.message else update.edited_message).reply_text(
        "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Calibre!\n\n"

        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ:\n"
        "- –ù–∞–∑–≤–∞–Ω–∏—é (/title <–Ω–∞–∑–≤–∞–Ω–∏–µ>)\n"
        "- –ê–≤—Ç–æ—Ä—É (/author <–∞–≤—Ç–æ—Ä>)\n"
        "- –°–µ—Ä–∏–∏ (/series <—Å–µ—Ä–∏—è>)\n"
        "- –õ—é–±–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (/search <–∑–∞–ø—Ä–æ—Å>) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <–∑–∞–ø—Ä–æ—Å>\n\n"

        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è:\n"
        f"- /random - –ø–æ–∫–∞–∂–µ—Ç {RANDOM_BOOKS_COUNT} —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n"
        "- –ü–æ–∏—Å–∫—É –∫–Ω–∏–≥–∏ –ø–æ ID (/id <–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä>) - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –∫–Ω–∏–≥–µ\n"
        "- –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä (/upload) - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ URL\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (/stats) - –ø–æ–∫–∞–∂–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥, –∞–≤—Ç–æ—Ä–æ–≤ –∏ —Ç.–¥.\n\n"

        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ (/add <user_id>) - –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º\n\n"

        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n\n"

        "üìñ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (EPUB, FB2, MOBI –∏ —Ç.–¥.).\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n\n"

        "–ü—Ä–∏–º–µ—Ä: /search –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä\n"

        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã, –∏ –±–æ—Ç "
        "–ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- title:–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "- title:=–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "- author:–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥ - –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É\n"
        "- author:=–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥ - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É\n"
        "- series:–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä - –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–∏\n"
        "- series:=–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–π —Å–µ—Ä–∏–∏\n"
        "- tags:—Ñ—ç–Ω—Ç–µ–∑–∏ - –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º\n"
        "- tags:=—Ñ—ç–Ω—Ç–µ–∑–∏ - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω—ã–º —Ç–µ–≥–∞–º\n"
        "- publisher:Bloomsbury - –ø–æ–∏—Å–∫ –ø–æ –∏–∑–¥–∞—Ç–µ–ª—é\n"
        "- publisher:=Bloomsbury - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–∑–¥–∞—Ç–µ–ª—é\n"
        "- languages:—Ä—É—Å—Å–∫–∏–π - –ø–æ–∏—Å–∫ –ø–æ —è–∑—ã–∫–∞–º\n"
        "- languages:=—Ä—É—Å—Å–∫–∏–π - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —è–∑—ã–∫—É\n"
        "- formats:fb2 - –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É\n"
        "- formats:=fb2 - –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É\n\n"

        "–ê —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:\n"
        "- title:–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä and author:–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥ - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É\n"


    )
    return reset_search(context)


@permission_required()
async def upload_book_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏"""
    logger.debug("upload_book_handler() start")

    reset_last_command(context)
    context.user_data['current_command'] = 'upload'

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø—Ä–æ—Å—Ç–æ /upload)
    if not update.message.document and not context.args:
        return await request_parameter(
            update,
            context,
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ (EPUB, FB2, MOBI –∏ —Ç.–¥.) "
            "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ URL –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /upload"
        )

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    if context.args:
        return await handle_url_upload(update, context, ' '.join(context.args))
    else:
        return await handle_document_upload(update, context)


@permission_required(True)
async def add_user_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ"""
    logger.debug("add_user_handler() start")

    if not context.args:
        await (update.message if update.message else update.edited_message
               ).reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <user_id>")
        return reset_last_command(context)

    new_user_id = context.args[0]
    if not new_user_id.isdigit():
        await (update.message if update.message else update.edited_message
               ).reply_text("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return reset_last_command(context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if auth.is_authorized(new_user_id):
        await (update.message if update.message else update.edited_message).reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"
        )
        return reset_last_command(context)

    if auth.add_authorized_user(new_user_id):
        await (update.message if update.message else update.edited_message
               ).reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        await (update.message if update.message else update.edited_message
               ).reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# ==========================================================================

# Other functions


async def cancel_handler(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    logger.debug("cancel_handler() start")
    await (update.message if update.message else update.edited_message
           ).reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return reset_search(context)


async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.debug("error_handler() start")
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", exc_info=context.error)
    if update and update.message:
        await (update.message if update.message else update.edited_message
               ).reply_text('üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


async def request_parameter(update: Update, context: CallbackContext, prompt: str) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä"""
    logger.debug("request_parameter() start")
    keyboard = []
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await (update.message if update.message else update.edited_message
           ).reply_text(prompt, reply_markup=reply_markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    context.user_data['awaiting_parameter'] = True
    return globals()[f"REQUEST_{context.user_data['current_command'].upper()}"]

# ==========================================================================

# Setup


def conversation_handler() -> ConversationHandler:
    """conversation_handler"""
    param_handlers = [
        CallbackQueryHandler(format_selected_handler,
                             pattern='^(back|cancel)$'),
        MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_parameter_response_handler
        ),
    ]
    return ConversationHandler(
        entry_points=[
            CommandHandler('search', search_handler),
            CommandHandler('title', title_handler),
            CommandHandler('author', author_handler),
            CommandHandler('series', series_handler),
            CommandHandler('random', random_handler),
            CommandHandler('id', id_handler),
            CommandHandler('upload', upload_book_handler),
            MessageHandler(filters.TEXT & ~filters.COMMAND, search_handler)
        ],
        states={
            SEARCH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               perform_search_handler)
            ],
            BOOK_SELECT: [
                CallbackQueryHandler(book_selected_handler, pattern='^book_'),
                CallbackQueryHandler(pagination_handler,
                                     pattern='^(prev_page|next_page)$'),
                CallbackQueryHandler(
                    book_selected_handler, pattern='^cancel$'),
                CommandHandler('search', search_handler),
                CommandHandler('title', title_handler),
                CommandHandler('author', author_handler),
                CommandHandler('series', series_handler),
                CommandHandler('random', random_handler),
                CommandHandler('id', id_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_handler)
            ],
            FORMAT_SELECT: [
                CallbackQueryHandler(
                    format_selected_handler, pattern='^format_'),
                CallbackQueryHandler(
                    format_selected_handler, pattern='^(back|cancel)$'),
                CommandHandler('search', search_handler),
                CommandHandler('title', title_handler),
                CommandHandler('author', author_handler),
                CommandHandler('series', series_handler),
                CommandHandler('random', random_handler),
                CommandHandler('id', id_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_handler)
            ],
            # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            REQUEST_SEARCH: param_handlers,
            REQUEST_TITLE: param_handlers,
            REQUEST_AUTHOR: param_handlers,
            REQUEST_SERIES: param_handlers,
            REQUEST_ID: param_handlers,
            REQUEST_UPLOAD: param_handlers,
        },
        fallbacks=[CommandHandler('cancel', cancel_handler)],
        per_message=False,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        per_chat=True,
        per_user=True
    )


def setup_handlers(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    logger.debug("setup_handlers() start")

    application.add_handler(MessageHandler(
        filters.Document.ALL & ~filters.COMMAND,
        upload_book_handler
    ))
    application.add_handler(CommandHandler("stats", stats_handler))
    application.add_handler(CommandHandler("add", add_user_handler))
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("help", start_handler))
    application.add_handler(CommandHandler("upload", upload_book_handler))
    application.add_handler(conversation_handler())
    application.add_error_handler(error_handler)
